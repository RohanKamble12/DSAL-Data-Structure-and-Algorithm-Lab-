#include <iostream>
#include <string>
using namespace std;

class node {
public:
    char data;
    node* left;
    node* right;

    node(char f) {
        this->data = f;
        left = NULL;
        right = NULL;
    }
};

class Stack {
public:
    node* data[100];
    int top = -1;

    void push(node* temp) {
        top++;
        data[top] = temp;
    }

    void pop() {
        top--;
    }

    node* peek() {
        return data[top];
    }

    bool isEmpty() {
        return top == -1;
    }
};

node* constructTree(Stack& mystack, const string& exp) {
    for (int i = exp.length() - 1; i >= 0; i--) {
        if ((exp[i] == '+') || (exp[i] == '-') || (exp[i] == '*') || (exp[i] == '/')) {
            node* op1 = mystack.peek();
            mystack.pop();
            node* op2 = mystack.peek();
            mystack.pop();
            node* newnode = new node(exp[i]);
            newnode->left = op1;
            newnode->right = op2;
            mystack.push(newnode);
        }
        else {
            node* newnode1 = new node(exp[i]);
            mystack.push(newnode1);
        }
    }
    return mystack.peek();
}

void display(node* root) {
    if (root == NULL) {
        return;
    }
    else {
        display(root->left);
        display(root->right);
        cout << root->data << "    ";
    }
}

void deleteTree(node* root) {
    if (root == NULL)
        return;

    deleteTree(root->left);
    deleteTree(root->right);

    delete root;
}

int main() {
    Stack mystack;
    string exp;
    cout << "Enter the prefix expression: ";
    cin >> exp;

    node* root = constructTree(mystack, exp);

    cout << "Post-order traversal: ";
    display(root);
    cout << endl;

    deleteTree(root);
    cout << "Expression tree deleted." << endl;

    return 0;
}
